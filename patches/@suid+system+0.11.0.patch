diff --git a/node_modules/@suid/system/inspect.d.ts b/node_modules/@suid/system/inspect.d.ts
index a575965..caa4141 100644
--- a/node_modules/@suid/system/inspect.d.ts
+++ b/node_modules/@suid/system/inspect.d.ts
@@ -5,6 +5,7 @@ export type ComponentObject<T = any> = {
     props: T;
 };
 export type InspectResult = JSX.Element | ComponentObject;
+export declare function createInspector<T>(fn: Component<T>, props: T): (newElementRef: HTMLElement) => void;
 export declare function inspect(fn: () => JSX.Element): InspectResult[];
 export declare function componentTrap<T>(fn: Component<T>): Component<T>;
 export declare function isComponentObject(input: unknown): input is ComponentObject;
diff --git a/node_modules/@suid/system/inspect.js b/node_modules/@suid/system/inspect.js
index 1a02220..b87c965 100644
--- a/node_modules/@suid/system/inspect.js
+++ b/node_modules/@suid/system/inspect.js
@@ -1,11 +1,28 @@
-import { createMemo } from "solid-js";
+import { createMemo, onCleanup } from "solid-js";
 export const $INSPECT = Symbol("solid-inspect");
+const nodeToComponent = new WeakMap();
 let inspectionEnabled = false;
+export function createInspector(fn, props) {
+    let elementRef;
+    const cleanup = () => {
+        if (elementRef) {
+            nodeToComponent.delete(elementRef);
+            elementRef = null;
+        }
+    };
+    onCleanup(cleanup);
+    return (newElementRef) => {
+        cleanup();
+        elementRef = newElementRef;
+        nodeToComponent.set(elementRef, { Component: fn, props, $INSPECT });
+    };
+}
 export function inspect(fn) {
     try {
         inspectionEnabled = true;
-        const result = fn();
-        return Array.isArray(result) ? result : [result];
+        const ret = fn();
+        const result = Array.isArray(ret) ? ret : [ret];
+        return result.map((v) => nodeToComponent.get(v) || v);
     }
     finally {
         inspectionEnabled = false;
